type Package {
 	id: ID!
    packageId: String!
    description: String
    svgIcon: String!
    packages: [Package!]!
    components: [Component!]!
}

type Component {
    id: ID!
    componentId: String!
    description: String
    svgContent: String
    svgIcon: String!
    htmlDocumentation: String
    parameters: String
    portGroups: [PortGroup!]!    
}

type Instance {
    id: ID!
    name: String!
    parameters: String
    component: Component!
}

type PortGroup {	
	name: String!
	svg: String!
	ports: [Port!]!
}

type Port {	
	portId: String!
	x : Int!
	y : Int!
    description: String
}

 
# The Root Query for the application
type Query {
	packages: [Package!]!
	package(packageId: String!):Package
    component(componentId: String!): Component
    components: [Component!]!
    instance(id : ID!): Instance    
}
 
input PackageInput {
    id: ID
    packageId: String!
    description: String   
    svgIcon: String
    subPackages: [PackageInput!]
    componentIds: [String!]
}
 
input ComponentInput {
    id: ID
    componentId: String!
    description: String
    svgContent: String
    svgIcon: String!
    htmlDocumentation: String
    parameters: String
    portGroups: [PortGroupInput!]    
}

input  InstanceInput {
    id: ID!
    name: String!
    parameters: String
    componentId: String!
}

input  PortGroupInput {	
	name: String!
	svg: String!
	ports: [PortInput!]
}

input  PortInput {	
	portId: String!
	x : Int!
	y : Int!
    description: String
} 
 
# The Root Mutation for the application
type Mutation {
    deletePackage(packageId: String!): Boolean!
    updatePackage(package: PackageInput!) : Package!
    deleteComponent(componentId: String!): Boolean!
    updateComponent(component: ComponentInput!) : Component!
    createInstance(name: String!, componentId: String!) : ID!
    deleteInstance(id : ID!): Boolean!
    updateInstance(instance : InstanceInput!) : Instance!    
}